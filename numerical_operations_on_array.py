# -*- coding: utf-8 -*-
"""numerical_operations_on_array.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Q1gumQGT0Jjf-y0NrND83SMGg0cGoLt
"""

import numpy as np

"""# Elementwise Operations

**1. Basic Operations**

**with scalars**
"""

a = np.array([1, 2, 3, 4]) #create an array

a + 1

a ** 2

"""**All arithmetic operates elementwise**"""

b = np.ones(4) + 1

a - b

a * b

# Matrix multiplication

c = np.diag([1, 2, 3, 4])

print(c * c)
print("*****************")
print(c.dot(c))

"""**comparisions**"""

a = np.array([1, 2, 3, 4])
b = np.array([5, 2, 2, 4])
a == b

a > b

#array-wise comparisions
a = np.array([1, 2, 3, 4])
b = np.array([5, 2, 2, 4])
c = np.array([1, 2, 3, 4])

np.array_equal(a, b)

np.array_equal(a, c)

"""**Logical Operations**"""

a = np.array([1, 1, 0, 0], dtype=bool)
b = np.array([1, 0, 1, 0], dtype=bool)

np.logical_or(a, b)

np.logical_and(a, b)

"""**Transcendental functions:**"""

a = np.arange(5)

np.sin(a)

np.log(a)

np.exp(a)   #evaluates e^x for each element in a given input

"""**Shape Mismatch**"""

a = np.arange(4)

a + np.array([1, 2])

"""# Basic Reductions

**computing sums**
"""

x = np.array([1, 2, 3, 4])
np.sum(x)

#sum by rows and by columns

x = np.array([[1, 1], [2, 2]])
x

x.sum(axis=0)   #columns first dimension

x.sum(axis=1)  #rows (second dimension)

"""**Other reductions**"""

x = np.array([1, 3, 2])
x.min()

x.max()

x.argmin()# index of minimum element

x.argmax()# index of maximum element

"""**Logical Operations**"""

np.all([True, True, False])

np.any([True, False, False])

#Note: can be used for array comparisions
a = np.zeros((50, 50))
np.any(a != 0)

np.all(a == a)

a = np.array([1, 2, 3, 2])
b = np.array([2, 2, 3, 2])
c = np.array([6, 4, 4, 5])
((a <= b) & (b <= c)).all()

"""**Statistics**"""

x = np.array([1, 2, 3, 1])
y = np.array([[1, 2, 3], [5, 6, 1]])
x.mean()

np.median(x)

np.median(y, axis=-1) # last axis

x.std()          # full population standard dev.

"""**Example:**

Data in populations.txt describes the populations of hares and lynxes (and carrots) in northern Canada during 20 years.
"""

#load data into numpy array object
data = np.loadtxt('populations.txt')

data

year, hares, lynxes, carrots = data.T #columns to variables
print(year)

#The mean population over time
populations = data[:, 1:]
populations

#sample standard deviations
populations.std(axis=0)

#which species has the highest population each year?

np.argmax(populations, axis=1)

"""# Broadcasting

Basic operations on numpy arrays (addition, etc.) are elementwise

This works on arrays of the same size.
    Nevertheless, Itâ€™s also possible to do operations on arrays of different sizes if NumPy can transform these arrays     so that they all have the same size: this conversion is called broadcasting.

The image below gives an example of broadcasting:

![title](broadcasting.png)
"""

a = np.tile(np.arange(0, 40, 10), (3,1))
print(a)

print("*************")
a=a.T
print(a)

b = np.array([0, 1, 2])
b

a + b

a = np.arange(0, 40, 10)
a.shape

a = a[:, np.newaxis]  # adds a new axis -> 2D array
a.shape

a

a + b

"""# Array Shape Manipulation

**Flattening**
"""

a = np.array([[1, 2, 3], [4, 5, 6]])
a.ravel() #Return a contiguous flattened array. A 1-D array, containing the elements of the input, is returned. A copy is made only if needed.

a.T #Transpose

a.T.ravel()

"""**Reshaping**

The inverse operation to flattening:
"""

print(a.shape)
print(a)

b = a.ravel()
print(b)

b = b.reshape((2, 3))
b

b[0, 0] = 100
a

"""**Note and       Beware: reshape may also return a copy!:**"""

a = np.zeros((3, 2))
b = a.T.reshape(3*2)
b[0] = 50
a

"""**Adding a Dimension**

Indexing with the np.newaxis object allows us to add an axis to an array

newaxis is used to increase the dimension of the existing array by one more dimension, when used once. Thus,

1D array will become 2D array

2D array will become 3D array

3D array will become 4D array and so on
"""

z = np.array([1, 2, 3])
z

z[:, np.newaxis]

"""**Dimension Shuffling**"""

a = np.arange(4*3*2).reshape(4, 3, 2)
a.shape

a

a[0, 2, 1]

"""**Resizing**"""

a = np.arange(4)
a.resize((8,))
a

"""However, it must not be referred to somewhere else:"""

b = a
a.resize((4,))

"""**Sorting Data**"""

#Sorting along an axis:
a = np.array([[5, 4, 6], [2, 3, 2]])
b = np.sort(a, axis=1)
b

#in-place sort
a.sort(axis=1)
a

#sorting with fancy indexing
a = np.array([4, 3, 1, 2])
j = np.argsort(a)
j

a[j]